
Labsi - MinimalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000730  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c7  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 88 00 	call	0x110	; 0x110 <main>
  88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
#define DC(valor) (255*(valor/1023))		// velocidade do motor
void ler_AD(void);

void init(void){
		/*PortB is the one used for the motor and is initialized in this 2 lines*/
		DDRB = 0b11100000;
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	84 b9       	out	0x04, r24	; 4
		PORTB = 0b00100000;
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
		/*PortD will be used as output for the led*/
		DDRD = 255; 
  98:	9f ef       	ldi	r25, 0xFF	; 255
  9a:	9a b9       	out	0x0a, r25	; 10
		PORTD=1;
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	9b b9       	out	0x0b, r25	; 11
		/*Here we initialize the Timer/Counter 0 with a prescaler of 1024 giving us a time of 1ms*/
		OCR0A = 77;
  a0:	9d e4       	ldi	r25, 0x4D	; 77
  a2:	97 bd       	out	0x27, r25	; 39
		TCCR0A = 0b11000010;
  a4:	92 ec       	ldi	r25, 0xC2	; 194
  a6:	94 bd       	out	0x24, r25	; 36
		TCCR0B = 0b10000101;
  a8:	95 e8       	ldi	r25, 0x85	; 133
  aa:	95 bd       	out	0x25, r25	; 37
		TIMSK0 = 0b00000010;
  ac:	92 e0       	ldi	r25, 0x02	; 2
  ae:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		/*OCR2 is where we give the microcontroler the information of the speed we want it to operate in, we forced it to start turned off,
		this uses the Timer/Counter 2 so we also initialized it TC2 witch a prescaler of 64 mode 1 and phase correct*/
		OCR2A = DC(0);
  b2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		TCCR2A = 0b10000001;
  b6:	21 e8       	ldi	r18, 0x81	; 129
  b8:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = 0b00001100;
  bc:	2c e0       	ldi	r18, 0x0C	; 12
  be:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		TIMSK2 = 0b00000010;
  c2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		
		ADMUX =  0b00100000;
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b10000110;
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		
		sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	contador++;
  e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
	if(contador==100){
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  ee:	84 36       	cpi	r24, 0x64	; 100
  f0:	49 f4       	brne	.+18     	; 0x104 <__vector_14+0x30>
		if(PORTD==0) PORTD = 1;
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	81 11       	cpse	r24, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_14+0x2a>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	01 c0       	rjmp	.+2      	; 0x100 <__vector_14+0x2c>
		else PORTD = 0;
  fe:	1b b8       	out	0x0b, r1	; 11
		contador= 0;  //resets the timer
 100:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contador>
	}
}
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:
}


int main(void)
{
	init();
 110:	0e 94 48 00 	call	0x90	; 0x90 <init>
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x4>

00000116 <ler_AD>:
    {
    }
}

void ler_AD(void){
	ADCSRA = ADCSRA | 0b01000000;
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADSC)) != 0);
 120:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 124:	86 fd       	sbrc	r24, 6
 126:	fc cf       	rjmp	.-8      	; 0x120 <ler_AD+0xa>
	
	motor = ADCH;
 128:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 13e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 142:	08 95       	ret

00000144 <__vector_7>:
		else PORTD = 0;
		contador= 0;  //resets the timer
	}
}
ISR(TIMER2_COMPA_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	ler_AD();
 166:	0e 94 8b 00 	call	0x116	; 0x116 <ler_AD>
	OCR2A = DC(motor);
 16a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 176:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	33 e0       	ldi	r19, 0x03	; 3
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__udivmodsi4>
 186:	21 95       	neg	r18
 188:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__udivmodsi4>:
 1ae:	a1 e2       	ldi	r26, 0x21	; 33
 1b0:	1a 2e       	mov	r1, r26
 1b2:	aa 1b       	sub	r26, r26
 1b4:	bb 1b       	sub	r27, r27
 1b6:	fd 01       	movw	r30, r26
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__udivmodsi4_ep>

000001ba <__udivmodsi4_loop>:
 1ba:	aa 1f       	adc	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	ee 1f       	adc	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	a2 17       	cp	r26, r18
 1c4:	b3 07       	cpc	r27, r19
 1c6:	e4 07       	cpc	r30, r20
 1c8:	f5 07       	cpc	r31, r21
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__udivmodsi4_ep>
 1cc:	a2 1b       	sub	r26, r18
 1ce:	b3 0b       	sbc	r27, r19
 1d0:	e4 0b       	sbc	r30, r20
 1d2:	f5 0b       	sbc	r31, r21

000001d4 <__udivmodsi4_ep>:
 1d4:	66 1f       	adc	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	88 1f       	adc	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	1a 94       	dec	r1
 1de:	69 f7       	brne	.-38     	; 0x1ba <__udivmodsi4_loop>
 1e0:	60 95       	com	r22
 1e2:	70 95       	com	r23
 1e4:	80 95       	com	r24
 1e6:	90 95       	com	r25
 1e8:	9b 01       	movw	r18, r22
 1ea:	ac 01       	movw	r20, r24
 1ec:	bd 01       	movw	r22, r26
 1ee:	cf 01       	movw	r24, r30
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
