
Labsi - MinimalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070c  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000277  00000000  00000000  00001055  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

#define DC(valor) ((255*valor)/100)		// velocidade do motor

void init(void){
		/*PortB is the one used for the motor and is initialized in this 2 lines*/
		DDRB = 0b11100000;
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	84 b9       	out	0x04, r24	; 4
		PORTB = 0b00100000;
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
		/*Port C will be used as output for the led*/
		DDRD = 255; 
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
		PORTD=1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8b b9       	out	0x0b, r24	; 11
		/*Here we initialize the Timer/Counter 0 with a prescaler of 1024 giving us a time of 1ms*/
		OCR0A = 77;
  a0:	8d e4       	ldi	r24, 0x4D	; 77
  a2:	87 bd       	out	0x27, r24	; 39
		TCCR0A = 0b11000010;
  a4:	82 ec       	ldi	r24, 0xC2	; 194
  a6:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0b10000101;
  a8:	85 e8       	ldi	r24, 0x85	; 133
  aa:	85 bd       	out	0x25, r24	; 37
		TIMSK0 = 0b00000010;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		/*OCR2A = DC(0);
		TCCR2A = 0b10000001;
		TCCR2B = 0b00001011;
		TIMSK2 = 0b00000001;*/
		
		sei();
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	contador++;
  c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
	if(contador==100){
  cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  d0:	84 36       	cpi	r24, 0x64	; 100
  d2:	49 f4       	brne	.+18     	; 0xe6 <__vector_14+0x30>
		if(PORTD==0) PORTD = 1;
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	81 11       	cpse	r24, r1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_14+0x2a>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	01 c0       	rjmp	.+2      	; 0xe2 <__vector_14+0x2c>
		else PORTD = 0;
  e0:	1b b8       	out	0x0b, r1	; 11
		contador= 0;  //resets the timer
  e2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contador>
	}
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_7>:
ISR(TIMER2_COMPA_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	OCR2A = DC(motor);
 114:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 120:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 124:	af ef       	ldi	r26, 0xFF	; 255
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__muluhisi3>
 12c:	24 e6       	ldi	r18, 0x64	; 100
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	0e 94 b2 00 	call	0x164	; 0x164 <__udivmodsi4>
 138:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:

int main(void)
{
	init();
 15e:	0e 94 48 00 	call	0x90	; 0x90 <init>
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x4>

00000164 <__udivmodsi4>:
 164:	a1 e2       	ldi	r26, 0x21	; 33
 166:	1a 2e       	mov	r1, r26
 168:	aa 1b       	sub	r26, r26
 16a:	bb 1b       	sub	r27, r27
 16c:	fd 01       	movw	r30, r26
 16e:	0d c0       	rjmp	.+26     	; 0x18a <__udivmodsi4_ep>

00000170 <__udivmodsi4_loop>:
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	ee 1f       	adc	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	a2 17       	cp	r26, r18
 17a:	b3 07       	cpc	r27, r19
 17c:	e4 07       	cpc	r30, r20
 17e:	f5 07       	cpc	r31, r21
 180:	20 f0       	brcs	.+8      	; 0x18a <__udivmodsi4_ep>
 182:	a2 1b       	sub	r26, r18
 184:	b3 0b       	sbc	r27, r19
 186:	e4 0b       	sbc	r30, r20
 188:	f5 0b       	sbc	r31, r21

0000018a <__udivmodsi4_ep>:
 18a:	66 1f       	adc	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	88 1f       	adc	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	1a 94       	dec	r1
 194:	69 f7       	brne	.-38     	; 0x170 <__udivmodsi4_loop>
 196:	60 95       	com	r22
 198:	70 95       	com	r23
 19a:	80 95       	com	r24
 19c:	90 95       	com	r25
 19e:	9b 01       	movw	r18, r22
 1a0:	ac 01       	movw	r20, r24
 1a2:	bd 01       	movw	r22, r26
 1a4:	cf 01       	movw	r24, r30
 1a6:	08 95       	ret

000001a8 <__muluhisi3>:
 1a8:	0e 94 df 00 	call	0x1be	; 0x1be <__umulhisi3>
 1ac:	a5 9f       	mul	r26, r21
 1ae:	90 0d       	add	r25, r0
 1b0:	b4 9f       	mul	r27, r20
 1b2:	90 0d       	add	r25, r0
 1b4:	a4 9f       	mul	r26, r20
 1b6:	80 0d       	add	r24, r0
 1b8:	91 1d       	adc	r25, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	08 95       	ret

000001be <__umulhisi3>:
 1be:	a2 9f       	mul	r26, r18
 1c0:	b0 01       	movw	r22, r0
 1c2:	b3 9f       	mul	r27, r19
 1c4:	c0 01       	movw	r24, r0
 1c6:	a3 9f       	mul	r26, r19
 1c8:	70 0d       	add	r23, r0
 1ca:	81 1d       	adc	r24, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	91 1d       	adc	r25, r1
 1d0:	b2 9f       	mul	r27, r18
 1d2:	70 0d       	add	r23, r0
 1d4:	81 1d       	adc	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	91 1d       	adc	r25, r1
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
