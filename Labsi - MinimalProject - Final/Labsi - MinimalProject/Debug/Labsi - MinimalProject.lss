
Labsi - MinimalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072b  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cd  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
//#define DC(valor) (valor*1)		// velocidade do motor
void ler_AD(void);

void init(void){
		/*PortB is the one used for the motor and is initialized in this 2 lines*/
		DDRB = 255;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
		PORTB = 255;
  94:	85 b9       	out	0x05, r24	; 5
		/*PortD will be used as output for the led*/
		DDRD = 255; 
  96:	8a b9       	out	0x0a, r24	; 10
		PORTD= 255;
  98:	8b b9       	out	0x0b, r24	; 11
		DDRC = 0b00000000;
  9a:	17 b8       	out	0x07, r1	; 7
		PORTC = 0b00000000;
  9c:	18 b8       	out	0x08, r1	; 8
		/*Here we initialize the Timer/Counter 0 with a prescaler of 1024 giving us a time of 1ms*/
		OCR0A = 77;
  9e:	8d e4       	ldi	r24, 0x4D	; 77
  a0:	87 bd       	out	0x27, r24	; 39
		TCCR0A = 0b11000010;
  a2:	82 ec       	ldi	r24, 0xC2	; 194
  a4:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0b10000101;
  a6:	85 e8       	ldi	r24, 0x85	; 133
  a8:	85 bd       	out	0x25, r24	; 37
		TIMSK0 = 0b00000010;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		/*OCR2 is where we give the microcontroler the information of the speed we want it to operate in, we forced it to start turned off,
		this uses the Timer/Counter 2 so we also initialized it TC2 witch a prescaler of 64 mode 1 and phase correct*/
		TCCR2A = 0b10000011;
  b0:	93 e8       	ldi	r25, 0x83	; 131
  b2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = 0b00000101;
  b6:	95 e0       	ldi	r25, 0x05	; 5
  b8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		TIMSK2 = 0b00000010;
  bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		//OCR2A = 50;
		ADMUX =  0b00100000;
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		
		ADCSRA = 0b10000110;
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		
		sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	contador++;
  dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador>
	if(contador==100){
  e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
  ea:	84 36       	cpi	r24, 0x64	; 100
  ec:	49 f4       	brne	.+18     	; 0x100 <__vector_14+0x30>
		if(PORTD==0) PORTD = 1;
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	81 11       	cpse	r24, r1
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_14+0x2a>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_14+0x2c>
		else PORTD = 0;
  fa:	1b b8       	out	0x0b, r1	; 11
		contador= 0;  //resets the timer
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contador>
	}
}
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:
}


int main(void)
{
	init();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <init>
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x4>

00000112 <ler_AD>:
		//OCR2A = 50;
    }
}

void ler_AD(void){
	ADCSRA |= (1<<6);  // inivia leitura adc
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<6)) != 0); // espera que a leitura termine
 11c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 120:	86 fd       	sbrc	r24, 6
 122:	fc cf       	rjmp	.-8      	; 0x11c <ler_AD+0xa>
	motor = ADCH; // guarda leitura
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	08 95       	ret

0000012e <__vector_7>:
		else PORTD = 0;
		contador= 0;  //resets the timer
	}
}
ISR(TIMER2_COMPA_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	ler_AD();
 150:	0e 94 89 00 	call	0x112	; 0x112 <ler_AD>
	OCR2A = motor;
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
